<script type="text/javascript">//<![CDATA[
	XHR.poll(5, '/cgi-bin/luci/admin/overthebox/interfaces_status', null,
		function(x, mArray)
		{
			var status = document.getElementById('overthebox_status');

			var temp = '<figure class="tree">';
			temp += '<ul>';
			if (mArray.overthebox)
			{
				if (mArray.overthebox.remote_from_lease)
				{
					if (stepbar)
						stepbar.securedNetwork.status = "done";
					temp += '<li>';
					temp += '<a href="#" style="background-color: lightgreen;">';
					temp += '<img src="/luci-static/resources/computer.png" />';
					temp +=  String.format('<br /><strong>%s (%s)</strong>', mArray.overthebox.remote_hostname ? mArray.overthebox.remote_hostname : 'You', mArray.overthebox.remote_addr);
					temp += '</a>'
				}
				var color = "rgb(240, 144, 144)";
				if (mArray.overthebox.socks_service) 
				{
					color = "rgb(144, 240, 144)";
					if (mArray.overthebox.vtun_service)
					{
						color = "rgb(144, 240, 144)";
					}
					else
					{
						color = "rgb(224,224,224)";
					}
				}
				else
				{
					color = "rgb(240, 144, 144)";
				}
				temp += '<li>';
				temp += String.format('<a href="#" style="background-color: %s;"><img src="/luci-static/resources/overthebox.png" width="150" />', color);
				if (mArray.overthebox.dhcpd)
				{
					for ( dhcpd in mArray.overthebox.dhcpd )
					{
						if (stepbar)
							stepbar.dhcp.status = "done"
						var dhcp = mArray.overthebox.dhcpd[dhcpd];
						temp += String.format('<br /><strong>%s (%s)</strong>', dhcp.interface, dhcp.router)
						temp += String.format('<br />%s - %s', dhcp.range_start, dhcp.range_end)
					}
				}
				else
				{
					temp += String.format('<br /><strong>lan (%s)</strong>', mArray.overthebox.local_addr);
				}
				if (mArray.overthebox.socks_service == false)
				{
					temp += String.format('<br /><strong style="color: red;">Socks service is not running</strong>');
				}
				if (mArray.overthebox.vtun_service == false)
                                {
                                        temp += String.format('<br /><strong style="color: red;">VTUN service is not running</strong>');
                                }
				temp += '</a>'
			}
			if (mArray.wans)
			{
				temp += '<ul>';
				for( var i = 0; i < mArray.wans.length; i++ )
				{
					// Get link color
					mArray.wans[i].color = stringToColour(mArray.wans[i].name)
					// Mwan status infos and colors
					var stat = '';
					var cssc = '';
					switch (mArray.wans[i].status)
					{
						case 'online':
							stat = 'Online (tracking active)';
							cssc = 'rgb(144, 240, 144)';
							break;
						case 'notMonitored':
							stat = 'Online (tracking off)';
							cssc = 'rgb(144, 240, 144)';
							break;
						case 'offline':
							stat = 'Offline';
							cssc = 'rgb(240, 144, 144)';
							break;
						case 'notEnabled':
							stat = 'Disabled';
							cssc = 'rgb(224,224,224)';
							break;
					}
					// Select color following multipath status
					switch (mArray.wans[i].multipath)
					{
						case 'off':
							cssc = 'rgb(255,153,51)';
						case 'failover':
							cssc = 'rgb(224,224,224)';
						case 'handover':
							cssc = 'rgb(255,153,51)';
					}
					// Populate info
					var curping = Math.floor(mArray.wans[i].curping);
					var minping = Math.floor(mArray.wans[i].minping);
					var avgping = Math.floor(mArray.wans[i].avgping);
					var multipath = mArray.wans[i].multipath;
					// Generate template
					temp += String.format(
						'<li><a href="%q" style="border-style: solid; border-color: %s; background-color: %s"><img src="/luci-static/resources/box.png" width="100" /><br /><strong>%s (%s)</strong><br />%s<br />ping: %s ms<br />Multipath: %s</a></li>',
						mArray.wans[i].link, mArray.wans[i].color, cssc, mArray.wans[i].name, mArray.wans[i].gateway, stat, curping, multipath
					);
				}

				// Check
				if (mArray.overthebox && mArray.overthebox.remote_from_lease == false)
				{
					if (stepbar)
						stepbar.securedNetwork.status = "doing";
					temp += '<li>';
					temp += '<a href="#" style="background-color: orange">'
                                        temp += '<img src="/luci-static/resources/computer.png"/>';
                                        temp +=  String.format('<br /><strong>You (%s)</strong>', mArray.overthebox.remote_addr);
					temp += '<div style="width: 150px"><strong style="color: red;">Your IP was not leased by OverTheBox</strong>';
					temp += '<br /><strong style="color: black;">Please unplug and plug your ethernet cable or turn off and on your Wifi</strong></div>';
					temp += '</a>';
					temp += '</li>';
				}

				temp += '</ul>';

			}
			temp += '</li>';
			if (mArray.overthebox && mArray.overthebox.remote_from_lease)
				temp += '</ul></li>';
			// Close tree
			temp += '</ul>';
			temp += '</figure>';
			status.innerHTML = temp;
		}
	);
//]]></script>

<fieldset id="interface_field" class="cbi-section">
	<legend>Network overview</legen>
	<table style=""><tr><td><div id="overthebox_status"></div></td></tr></table>
</fieldset>

<style type="text/css">
/* Mwan3 ligthed CSS */
.container {	/* container for entire page. fixes bootstrap theme's ridiculously small page width */
	max-width: 1044px;
}
#interface_field {
	padding: 12px 20px 20px 20px;
}
#interface_status_text {
	display: table;
	font-size: 14px;
	margin: auto;
	max-width: 1044px;
	min-width: 246px;
	width: 100%;
}

/*Now the CSS*/
.tree ul {
	padding-top: 20px; position: relative;
	
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

.tree li {
	float: left; text-align: center;
	list-style-type: none;
	position: relative;
	padding: 20px 5px 0 5px;
	
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

/*We will use ::before and ::after to draw the connectors*/

.tree li::before, .tree li::after{
	content: '';
	position: absolute; top: 0; right: 50%;
	border-top: 1px solid #ccc;
	width: 50%; height: 20px;
}
.tree li::after{
	right: auto; left: 50%;
	border-left: 1px solid #ccc;
}

/*We need to remove left-right connectors from elements without 
any siblings*/
.tree li:only-child::after, .tree li:only-child::before {
	display: none;
}

/*Remove space from the top of single children*/
.tree li:only-child{ padding-top: 0;}

/*Remove left connector from first child and 
right connector from last child*/
.tree li:first-child::before, .tree li:last-child::after{
	border: 0 none;
}
/*Adding back the vertical connector to the last nodes*/
.tree li:last-child::before{
	border-right: 1px solid #ccc;
	border-radius: 0 5px 0 0;
	-webkit-border-radius: 0 5px 0 0;
	-moz-border-radius: 0 5px 0 0;
}
.tree li:first-child::after{
	border-radius: 5px 0 0 0;
	-webkit-border-radius: 5px 0 0 0;
	-moz-border-radius: 5px 0 0 0;
}

/*Time to add downward connectors from parents*/
.tree ul ul::before{
	content: '';
	position: absolute; top: 0; left: 50%;
	border-left: 1px solid #ccc;
	width: 0; height: 20px;
}

.tree li a{
	border: 1px solid #ccc;
	padding: 5px 10px;
	text-decoration: none;
	color: #666;
	font-family: arial, verdana, tahoma;
	font-size: 11px;
	display: inline-block;
	
	border-radius: 5px;
	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

/*Time for some hover effects*/
/*We will apply the hover effect the the lineage of the element also*/
.tree li a:hover, .tree li a:hover+ul li a {
	background: #c8e4f8; color: #000; border: 1px solid #94a0b4;
}
/*Connector styles on hover*/
.tree li a:hover+ul li::after, 
.tree li a:hover+ul li::before, 
.tree li a:hover+ul::before, 
.tree li a:hover+ul ul::before{
	border-color:  #94a0b4;
}

/*Thats all. I hope you enjoyed it.
Thanks :)*/
</style>
