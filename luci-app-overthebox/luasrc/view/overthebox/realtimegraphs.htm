<%
-- Copyright 2015 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-%>
<!-- Begin of realtimegraphs.htm -->
<script type="text/javascript">//<![CDATA[

	function bandwidth_label(bytes, br)
	{
		var uby = '<%:kB/s%>';
		var kby = (bytes / 1024);

		if (kby >= 1024)
		{
			uby = '<%:MB/s%>';
			kby = kby / 1024;
		}

		var ubi = '<%:kbit/s%>';
		var kbi = (bytes * 8 / 1024);

		if (kbi >= 1024)
		{
			ubi = '<%:Mbit/s%>';
			kbi = kbi / 1024;
		}

		return String.format("%f %s%s(%f %s)",
			kbi.toFixed(2), ubi,
			br ? '<br />' : ' ',
			kby.toFixed(2), uby
		);
	}

	/* Smoother */
	function simple_moving_averager(name, period) {
		var nums = {}
		nums[name] = [];
		return function(num) {
			nums[name].push(num);
			if (nums[name].length > period)
				nums[name].splice(0,1);  // remove the first element of the array
		        var sum = 0;
		        for (var i in nums[name])
				sum += nums[name][i];
			var n = period;
			if (nums[name].length < period)
				n = nums[name].length;
			return(sum/n);
		}
	}

	var bwxhr = new XHR();

	var Gdn;
	var Gup;

	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var width  = 760;
	var height = 300;
	var step   = 5;

	var data_wanted = Math.floor(width / step);

	var data_fill   = 0;
	var data_stamp  = 0;

	var label_25;
	var label_50;
	var label_75;

	var label_scale;

	var def;
	var dntopline;
	var uptopline;
	var dnPolygons 	= {};
	var dndata	= {};
        var upPolygons 	= {};
	var updata  	= {};

	/* wait for SVG */
	window.setTimeout(
		function() {
			var dnsvg = document.getElementById('dnsvg');
                        var upsvg = document.getElementById('upsvg');

			try {
				Gdn = dnsvg.getSVGDocument ? dnsvg.getSVGDocument() : dnsvg.contentDocument;
                                Gup = upsvg.getSVGDocument ? upsvg.getSVGDocument() : upsvg.contentDocument;
			}
			catch(e) {
				Gdn = document.embeds['dnsvg'].getSVGDocument();
				Gup = document.embeds['upsvg'].getSVGDocument();
			}

			if (!Gdn || !Gup)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = dnsvg.offsetWidth  - 2;
				height      = dnsvg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);
				/* find svg elements */
				labeldn_25 = Gdn.getElementById('label_25');
				labeldn_50 = Gdn.getElementById('label_50');
				labeldn_75 = Gdn.getElementById('label_75');

                                labelup_25 = Gup.getElementById('label_25');
                                labelup_50 = Gup.getElementById('label_50');
                                labelup_75 = Gup.getElementById('label_75');

				labeldn_scale   = document.getElementById('dnscale');
                                labelup_scale   = document.getElementById('upscale');

				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var linedn = Gdn.createElementNS('http://www.w3.org/2000/svg', 'line');
						linedn.setAttribute('x1', i);
						linedn.setAttribute('y1', 0);
						linedn.setAttribute('x2', i);
						linedn.setAttribute('y2', '100%');
						linedn.setAttribute('style', 'stroke:black;stroke-width:0.3');

					var textdn = Gdn.createElementNS('http://www.w3.org/2000/svg', 'text');
						textdn.setAttribute('x', i + 5);
						textdn.setAttribute('y', 15);
						textdn.setAttribute('style', 'fill:#999999; font-size:9pt');
						textdn.appendChild(Gdn.createTextNode(Math.round((width - i) / step / 60) + 'm'));

					labeldn_25.parentNode.appendChild(linedn);
					labeldn_25.parentNode.appendChild(textdn);

                                        var lineup = Gup.createElementNS('http://www.w3.org/2000/svg', 'line');
                                                lineup.setAttribute('x1', i);
                                                lineup.setAttribute('y1', 0);
                                                lineup.setAttribute('x2', i);
                                                lineup.setAttribute('y2', '100%');
                                                lineup.setAttribute('style', 'stroke:black;stroke-width:0.3');

                                        var textup = Gup.createElementNS('http://www.w3.org/2000/svg', 'text');
                                                textup.setAttribute('x', i + 5);
                                                textup.setAttribute('y', 15);
                                                textup.setAttribute('style', 'fill:#999999; font-size:9pt');
                                                textup.appendChild(Gup.createTextNode(Math.round((width - i) / step / 60) + 'm'));

                                        labelup_25.parentNode.appendChild(lineup);
                                        labelup_25.parentNode.appendChild(textup);
				}

				labeldn_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);
                                labelup_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);

				/* render datasets, start update interval */
				XHR.poll(3, '<%=build_url("admin/overthebox/bandwidth_status", "all")%>', null,
					function(x, dataarray)
					{
						var data_max_dnl   = 0;
						var data_max_upl   = 0;
						var data_scale_dnl = 0;
						var data_scale_upl = 0;

						var data_rx_avg = 0;
						var data_tx_avg = 0;

						var data_rx_peak = 0;
						var data_tx_peak = 0;

						var data = {};

						for(var itf in dataarray["wans"])
						{
							// convert json string to json object
							data[itf] = JSON.parse(dataarray["wans"][itf]);
							// Create lines for each interfaces
							var color = stringToColour(itf);
							if(typeof dnPolygons[itf] != "object")
							{
								// Create a new polygon to draw the bandwith
								var dnline = Gdn.createElementNS('http://www.w3.org/2000/svg', 'polyline');
								dnline.setAttributeNS(null, 'id', 'rx_' + itf);
								dnline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity:0.6;');
								Gdn.getElementById('rx').parentNode.appendChild(dnline);

								dnPolygons[itf] = Gdn.getElementById('rx_' + itf);
				                                /* prefill datasets */
								dndata[itf] = [ ];
				                                for (var i = 0; i < data_wanted; i++)
				                                {
				                                        dndata[itf][i] = 0;
				                                }
							}
							if(typeof upPolygons[itf] != "object")
							{
                                                                var upline = Gup.createElementNS('http://www.w3.org/2000/svg', 'polyline');
                                                                upline.setAttributeNS(null, 'id', 'tx_' + itf);
								upline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity:0.6;');
								Gup.getElementById('tx').parentNode.appendChild(upline);

                                                                upPolygons[itf] = Gup.getElementById('tx_' + itf);
                                                                /* prefill datasets */
								updata[itf] = [ ];
                                                                for (var i = 0; i < data_wanted; i++)
                                                                {
                                                                        updata[itf][i] = 0;
                                                                }
							}
						}

						var dnsma = {};
						var upsma = {};
						for (var itf in data)
						{
							if(!dnsma[itf])
							{
								dnsma[itf] = simple_moving_averager('down_'+itf, 15);
							}
							if(!upsma[itf])
							{
								upsma[itf] = simple_moving_averager('up_'+itf, 15);
							}
							for (var i = data_stamp ? 0 : 1; i < data[itf].length; i++)
							{
								/* skip overlapping entries */
								if (data[itf][i][TIME] <= data_stamp)
									continue;

								/* normalize difference against time interval */
								if (i > 0)
								{
									var time_delta = data[itf][i][TIME] - data[itf][i-1][TIME];
									if (time_delta)
									{
										dndata[itf].push(dnsma[itf]((data[itf][i][RXB] - data[itf][i-1][RXB]) / time_delta));
										updata[itf].push(upsma[itf]((data[itf][i][TXB] - data[itf][i-1][TXB]) / time_delta));
									}
								}
							}
							/* cut off outdated entries */
							dndata[itf] = dndata[itf].slice(dndata[itf].length - data_wanted, dndata[itf].length);
							updata[itf] = updata[itf].slice(updata[itf].length - data_wanted, updata[itf].length);
						}


						/* remember current timestamp, calculate horizontal scale */
						for (var itf in data)
						{
							for (var i = 0; i < data[itf].length; i++)
								data_stamp = Math.max(data_stamp, data[itf][data[itf].length-1][TIME]);
						}

						var el = Gdn.getElementById('rx').parentNode;

						// intialize upline and downline datas for download and upload
						var uplineDnl 	= { };
						var downlineDnl	= { };
                                                var uplineUpl   = { };
                                                var downlineUpl = { };
						// fetch upline and downline datas
						var toadditf = [ ];
						for (var itf in data)
						{
							uplineDnl[itf] 	= [ ];
							downlineDnl[itf]= [ ];
                                                        uplineUpl[itf]  = [ ];
                                                        downlineUpl[itf]= [ ];
							// build point sets
							var data_tx_avg;
							var data_rx_avg;
							var data_rx_peak = 0;
							var data_tx_peak = 0;
							for (var i = 0; i < dndata[itf].length; i++)
							{
								var rx_bot=0;
								var tx_bot=0;
								for(var j=0; j < toadditf.length; j++)
								{
									rx_bot += dndata[toadditf[j]][i];
									tx_bot += updata[toadditf[j]][i];
								}
								// set upline of the interface
								uplineDnl[itf][i] = dndata[itf][i] + rx_bot;
								data_rx_peak = Math.max(data_rx_peak, dndata[itf][i]);
								data_max_dnl = Math.max(data_max_dnl, uplineDnl[itf][i]);
								uplineUpl[itf][i] = updata[itf][i] + tx_bot;
								data_tx_peak = Math.max(data_tx_peak, updata[itf][i]);
								data_max_upl = Math.max(data_max_upl, uplineUpl[itf][i]);

	                                                        if (i > 0)
	                                                        {
	                                                                data_rx_avg = (data_rx_avg + dndata[itf][i]) / 2;
	                                                                data_tx_avg = (data_tx_avg + updata[itf][i]) / 2;
	                                                        }
	                                                        else
	                                                        {
	                                                                data_rx_avg = dndata[itf][i];
	                                                                data_tx_avg = updata[itf][i];
	                                                        }

								if(toadditf.length)
								{
									downlineDnl[itf][i] = uplineDnl[toadditf[toadditf.length-1]][i];
									downlineUpl[itf][i] = uplineUpl[toadditf[toadditf.length-1]][i];
								}
							}
							toadditf.push(itf);
						}
						data_scale_upl = height / (data_max_upl * 1.1);
						data_scale_dnl = height / (data_max_dnl * 1.1);

						for (var itf in uplineDnl)
						{
							var y_rx = 0;
							var y_tx = 0;

							/* plot data */
							var pt_rx = '0,' + height;
							var pt_tx = '0,' + height;

							// draw polygon	
							for (var i = 0; i < uplineDnl[itf].length; i++)
							{
								var x = i * step;
								
								y_rx = height - Math.floor((uplineDnl[itf][i]) * data_scale_dnl);
								y_tx = height - Math.floor((uplineUpl[itf][i]) * data_scale_upl);

								pt_rx += ' ' + x + ',' + y_rx;
								pt_tx += ' ' + x + ',' + y_tx;
							}
                                                        // draw last tangant point in upline graph
                                                        pt_rx += ' ' + width + ',' + y_rx;
                                                        pt_rx += ' ' + width + ',' + height;

                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                        pt_tx += ' ' + width + ',' + height;

                                                        for (var i = downlineDnl[itf].length - 1; i >= 0; i--)
                                                        {
                                                                var x = i * step;

                                                                y_rx = height - Math.floor((downlineDnl[itf][i] - 10) * data_scale_dnl);
                                                                y_tx = height - Math.floor((downlineUpl[itf][i] - 10) * data_scale_upl);
                                                                // recreate tangant point in bottom line graph
                                                                if(i == downlineDnl[itf].length - 1)
                                                                {
                                                                        pt_rx += ' ' + width + ',' + height;
                                                                        pt_rx += ' ' + width + ',' + y_rx;

                                                                        pt_tx += ' ' + width + ',' + height;
                                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                                }

                                                                pt_rx += ' ' + x + ',' + y_rx;
                                                                pt_tx += ' ' + x + ',' + y_tx;
                                                        }
                                                        // go back to right bottom corner to correctly fill polyline
                                                        pt_tx += ' ' + 0 + ',' + height;
                                                        pt_tx += ' ' + width + ',' + height;
                                                        pt_rx += ' ' + 0 + ',' + height;
                                                        pt_rx += ' ' + width + ',' + height;

							// Draw polygon
							dnPolygons[itf].setAttribute('points', pt_rx);
							upPolygons[itf].setAttribute('points', pt_tx);

							labeldn_25.firstChild.data = bandwidth_label(1.1 * 0.25 * data_max_dnl);
							labeldn_50.firstChild.data = bandwidth_label(1.1 * 0.50 * data_max_dnl);
							labeldn_75.firstChild.data = bandwidth_label(1.1 * 0.75 * data_max_dnl);

                                                        labelup_25.firstChild.data = bandwidth_label(1.1 * 0.25 * data_max_upl);
                                                        labelup_50.firstChild.data = bandwidth_label(1.1 * 0.50 * data_max_upl);
                                                        labelup_75.firstChild.data = bandwidth_label(1.1 * 0.75 * data_max_upl);
						}
						/* now draw top line */
						var keys = Object.keys(uplineDnl);
						if (keys.length)
						{
							var itf = keys[keys.length - 1];
							if (typeof dntopline != "object")
							{
                                                                dntopline = Gdn.getElementById('rx');
								dntopline.setAttributeNS(null, 'style', 'stroke:DimGray;stroke-width:3;stroke-linecap="round";fill:;fill-opacity:0;');
								/* Move line on top */
								var father = dntopline.parentNode;
								father.removeChild(dntopline);
								father.appendChild(dntopline);
							}
							if (typeof uptopline != "object")
                                                        {
                                                                uptopline = Gup.getElementById('tx');
								uptopline.setAttributeNS(null, 'style', 'stroke:DimGray;stroke-width:3;stroke-linecap="round";fill:;fill-opacity:0;');
								/* Move line on top */
								var father = uptopline.parentNode;
								father.removeChild(uptopline);
								father.appendChild(uptopline);
                                                        }
                                                        var y_rx = 0;
                                                        var y_tx = 0;

                                                        /* plot data */
                                                        var pt_rx = '0,' + height;
                                                        var pt_tx = '0,' + height;

                                                        // draw polygon
                                                        for (var i = 0; i < uplineDnl[itf].length; i++)
                                                        {
                                                                var x = i * step;

                                                                y_rx = height - Math.floor((uplineDnl[itf][i]) * data_scale_dnl);
                                                                y_tx = height - Math.floor((uplineUpl[itf][i]) * data_scale_upl);

                                                                pt_rx += ' ' + x + ',' + y_rx;
                                                                pt_tx += ' ' + x + ',' + y_tx;
                                                        }
                                                        // draw last tangant point in upline graph
                                                        pt_rx += ' ' + width + ',' + y_rx;
                                                        pt_rx += ' ' + width + ',' + height;

                                                        pt_tx += ' ' + width + ',' + y_tx;
                                                        pt_tx += ' ' + width + ',' + height;
							
							dntopline.setAttribute('points', pt_rx);
                                                        uptopline.setAttribute('points', pt_tx);
						}
					}
				);
		            }
	                }, 1000
		);
		
// Set 1h reload page timer because of suspected SVG graph memmory leak
window.setTimeout(function()
{ 
	if (activating == false)
		location.reload(true) 
}, 3600000)

//]]></script>

<fieldset class="cbi-section">
	<h2><%:Realtime Traffic%></h2>
	<!-- <legend><%:Realtime Traffic%></legend> -->

	<div id="overthebox_graph">
		<table width="100%">
			<tr>
				<td style="border-style: none; width: 500px; padding-bottom: 0;"><strong><%:Download:%></strong></td>
				<td style="border-style: none; width: 500px; padding-bottom: 0;"><strong><%:Upload:%></strong></td>
			</tr>
			<tr>
				<td style="border-style: none;">
					<embed id="dnsvg" class="svg-graph" style="width:500px; height:300px;" src="<%=resource%>/bandwidth.svg" />
					<div style="text-align:right"><small id="dnscale">-</small></div>
				</td>
				<td style="border-style: none;">
					<embed id="upsvg" class="svg-graph" style="width:500px; height:300px;" src="<%=resource%>/bandwidth.svg" />
					<div style="text-align:right"><small id="upscale">-</small></div>
				</td>
			<tr>
		</table>
	</div>
</fieldset>
<!-- end of realtimegraphs.htm -->
