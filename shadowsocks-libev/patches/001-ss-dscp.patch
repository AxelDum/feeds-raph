diff --git a/src/jconf.c b/src/jconf.c
index 2ddaedc..0e2344d 100644
--- a/src/jconf.c
+++ b/src/jconf.c
@@ -97,6 +97,40 @@ void parse_addr(const char *str, ss_addr_t *addr)
     }
 }
 
+static int parse_dscp(char *str)
+{
+    size_t str_len = strlen(str);
+
+    // Pre-defined values (EF, CSx, AFxy)
+    if (str_len == 2 && strcasecmp(str, "EF") == 0) {
+        return DSCP_EF;
+    }
+
+    if (str_len == DSCP_CS_LEN && strncasecmp(str, "CS", 2) == 0) {
+        if (str[2] >= '0' && str[2] <= '7') {
+            // CSx = 8x
+            return (str[2] - '0') << 3;
+        }
+    }
+
+    if (str_len == DSCP_AF_LEN && strncasecmp(str, "AF", 2) == 0) {
+        if (str[2] >= '1' && str[2] <= '4' && str[3] >= '1' && str[3] <= '3') {
+            // AFxy = 8x + 2y
+            return ((str[2] - '0') << 3) | ((str[3] - '0') << 1);
+        }
+    }
+
+    // Manual hexadecimal mode (0xYZ)
+    char *endptr;
+    int dscp = (int)strtol(str, &endptr, 0);
+    if (*endptr == '\0' && dscp >= DSCP_MIN && dscp <= DSCP_MAX) {
+        return dscp;
+    }
+
+    LOGE("Invalid DSCP value (%s)", str);
+    return DSCP_DEFAULT;
+}
+
 jconf_t *read_jconf(const char *file)
 {
     static jconf_t conf;
@@ -193,6 +227,23 @@ jconf_t *read_jconf(const char *file)
                 conf.nofile = value->u.integer;
             } else if (strcmp(name, "nameserver") == 0) {
                 conf.nameserver = to_string(value);
+            } else if (strcmp(name, "dscp") == 0) {
+                if (value->type == json_object) {
+                    for (j = 0; j < value->u.object.length; j++) {
+                        if (j >= MAX_DSCP_NUM) {
+                            break;
+                        }
+                        json_value *v = value->u.object.values[j].value;
+                        if (v->type == json_string) {
+                            int dscp = parse_dscp(to_string(v));
+                            char *port = ss_strndup(value->u.object.values[j].name,
+                                    value->u.object.values[j].name_length);
+                            conf.dscp[j].port = port;
+                            conf.dscp[j].dscp = dscp;
+                            conf.dscp_num = j + 1;
+                        }
+                    }
+                }
             }
         }
     } else {
diff --git a/src/jconf.h b/src/jconf.h
index 752caf4..91bb6aa 100644
--- a/src/jconf.h
+++ b/src/jconf.h
@@ -24,11 +24,21 @@
 
 #define MAX_PORT_NUM 1024
 #define MAX_REMOTE_NUM 10
+#define MAX_DSCP_NUM 64
 #define MAX_CONF_SIZE 128 * 1024
 #define MAX_DNS_NUM 4
 #define MAX_CONNECT_TIMEOUT 10
 #define MIN_UDP_TIMEOUT 10
 
+#define DSCP_EF     0x2E
+#define DSCP_MIN    0x0
+#define DSCP_MAX    0x3F
+#define DSCP_DEFAULT 0x0
+#define DSCP_MIN_LEN 2
+#define DSCP_MAX_LEN 4
+#define DSCP_CS_LEN 3
+#define DSCP_AF_LEN 4
+
 typedef struct {
     char *host;
     char *port;
@@ -40,6 +50,11 @@ typedef struct {
 } ss_port_password_t;
 
 typedef struct {
+    char *port;
+    int dscp;
+} ss_dscp_t;
+
+typedef struct {
     int remote_num;
     ss_addr_t remote_addr[MAX_REMOTE_NUM];
     int port_password_num;
@@ -54,6 +69,8 @@ typedef struct {
     int fast_open;
     int nofile;
     char *nameserver;
+    int dscp_num;
+    ss_dscp_t dscp[MAX_DSCP_NUM];
 } jconf_t;
 
 jconf_t *read_jconf(const char *file);
diff --git a/src/redir.c b/src/redir.c
index 3e2bc1b..b027389 100644
--- a/src/redir.c
+++ b/src/redir.c
@@ -29,6 +29,7 @@
 #include <locale.h>
 #include <netdb.h>
 #include <netinet/in.h>
+#include <netinet/ip.h>
 #include <netinet/tcp.h>
 #include <pthread.h>
 #include <signal.h>
@@ -139,10 +140,7 @@ int create_and_bind(const char *addr, const char *port)
 #ifdef SO_NOSIGPIPE
         setsockopt(listen_sock, SOL_SOCKET, SO_NOSIGPIPE, &opt, sizeof(opt));
 #endif
-        int err = set_reuseport(listen_sock);
-        if (err == 0) {
-            LOGI("tcp port reuse enabled");
-        }
+        set_reuseport(listen_sock);
 
         s = bind(listen_sock, rp->ai_addr, rp->ai_addrlen);
         if (s == 0) {
@@ -607,9 +605,37 @@ static void accept_cb(EV_P_ ev_io *w, int revents)
     setsockopt(remotefd, SOL_SOCKET, SO_NOSIGPIPE, &opt, sizeof(opt));
 #endif
 
-    // Setup
     setnonblocking(remotefd);
 
+    int tos = listener->tos;
+    if (tos >= 0) {
+        if (setsockopt(remotefd, IPPROTO_IP, IP_TOS, &tos, sizeof(tos)) != 0) {
+            ERROR("setsockopt IP_TOS");
+        }
+    }
+
+    // Logging (client address and original destination)
+    char ip[2][NI_MAXHOST];
+    char port[2][NI_MAXSERV];
+
+    err = getnameinfo(remote_addr, sizeof(*remote_addr),
+            ip[0], sizeof(ip[0]), port[0], sizeof(port[0]),
+            NI_NUMERICHOST | NI_NUMERICSERV);
+    if (err) {
+        LOGE("getnameinfo: %s", gai_strerror(err));
+    }
+    else {
+        err = getnameinfo((struct sockaddr *)&destaddr, sizeof(destaddr),
+                ip[1], sizeof(ip[1]), port[1], sizeof(port[1]),
+                NI_NUMERICHOST | NI_NUMERICSERV);
+        if (err) {
+            LOGE("getnameinfo: %s", gai_strerror(err));
+        }
+        else {
+            LOGI("accept client %s:%s (-> %s:%s)", ip[0], port[0], ip[1], port[1]);
+        }
+    }
+
     server_t *server = new_server(serverfd, listener->method);
     remote_t *remote = new_remote(remotefd, listener->timeout);
     server->remote   = remote;
@@ -640,6 +666,9 @@ int main(int argc, char **argv)
     ss_addr_t remote_addr[MAX_REMOTE_NUM];
     char *remote_port = NULL;
 
+    int dscp_num = 0;
+    ss_dscp_t * dscp = NULL;
+
     opterr = 0;
 
     while ((c = getopt(argc, argv, "f:s:p:l:k:t:m:c:b:a:n:uUvA")) != -1)
@@ -736,6 +765,8 @@ int main(int argc, char **argv)
         if (auth == 0) {
             auth = conf->auth;
         }
+        dscp_num = conf->dscp_num;
+        dscp = conf->dscp;
 #ifdef HAVE_SETRLIMIT
         if (nofile == 0) {
             nofile = conf->nofile;
@@ -784,56 +815,68 @@ int main(int argc, char **argv)
     LOGI("initialize ciphers... %s", method);
     int m = enc_init(password, method);
 
-    // Setup proxy context
-    listen_ctx_t listen_ctx;
-    listen_ctx.remote_num  = remote_num;
-    listen_ctx.remote_addr = malloc(sizeof(struct sockaddr *) * remote_num);
-    for (int i = 0; i < remote_num; i++) {
-        char *host = remote_addr[i].host;
-        char *port = remote_addr[i].port == NULL ? remote_port :
-                     remote_addr[i].port;
-        struct sockaddr_storage *storage = malloc(sizeof(struct sockaddr_storage));
-        memset(storage, 0, sizeof(struct sockaddr_storage));
-        if (get_sockaddr(host, port, storage, 1) == -1) {
-            FATAL("failed to resolve the provided hostname");
-        }
-        listen_ctx.remote_addr[i] = (struct sockaddr *)storage;
-    }
-    listen_ctx.timeout = atoi(timeout);
-    listen_ctx.method  = m;
-
     struct ev_loop *loop = EV_DEFAULT;
 
-    if (mode != UDP_ONLY) {
-        // Setup socket
-        int listenfd;
-        listenfd = create_and_bind(local_addr, local_port);
-        if (listenfd < 0) {
-            FATAL("bind() error");
-        }
-        if (listen(listenfd, SOMAXCONN) == -1) {
-            FATAL("listen() error");
-        }
-        setnonblocking(listenfd);
+    listen_ctx_t * listen_ctxs = malloc(sizeof(listen_ctx_t) * (dscp_num + 1));
+
+    for (int k = -1; k < dscp_num; ++k) {
+        char *listen_port = (k >= 0) ? dscp[k].port : local_port;
+        listen_ctx_t *listen_ctx = listen_ctxs + k + 1;
+
+        // Setup proxy context
+        listen_ctx->remote_num  = remote_num;
+        listen_ctx->remote_addr = malloc(sizeof(struct sockaddr *) * remote_num);
+        for (int i = 0; i < remote_num; i++) {
+            char *host = remote_addr[i].host;
+            char *port = remote_addr[i].port == NULL ? remote_port :
+                         remote_addr[i].port;
+            struct sockaddr_storage *storage = malloc(sizeof(struct sockaddr_storage));
+            memset(storage, 0, sizeof(struct sockaddr_storage));
+            if (get_sockaddr(host, port, storage, 1) == -1) {
+                FATAL("failed to resolve the provided hostname");
+            }
+            listen_ctx->remote_addr[i] = (struct sockaddr *)storage;
+        }
+        listen_ctx->timeout = atoi(timeout);
+        listen_ctx->method  = m;
+        listen_ctx->tos = (k >= 0) ? dscp[k].dscp << 2 : -1;
+
+        if (mode != UDP_ONLY) {
+            // Setup socket
+            int listenfd;
+            listenfd = create_and_bind(local_addr, listen_port);
+            if (listenfd < 0) {
+                FATAL("bind() error");
+            }
 
-        listen_ctx.fd = listenfd;
+            if (listen(listenfd, SOMAXCONN) == -1) {
+                FATAL("listen() error");
+            }
+            setnonblocking(listenfd);
 
-        ev_io_init(&listen_ctx.io, accept_cb, listenfd, EV_READ);
-        ev_io_start(loop, &listen_ctx.io);
-    }
+            listen_ctx->fd = listenfd;
 
-    // Setup UDP
-    if (mode != TCP_ONLY) {
-        LOGI("UDP relay enabled");
-        init_udprelay(local_addr, local_port, listen_ctx.remote_addr[0],
-                      get_sockaddr_len(listen_ctx.remote_addr[0]), m, auth, listen_ctx.timeout, NULL);
-    }
+            ev_io_init(&listen_ctx->io, accept_cb, listenfd, EV_READ);
+            ev_io_start(loop, &listen_ctx->io);
+        }
 
-    if (mode == UDP_ONLY) {
-        LOGI("TCP relay disabled");
-    }
+        // Setup UDP
+        if (mode != TCP_ONLY) {
+            LOGI("UDP relay enabled");
+            init_udprelay(local_addr, listen_port, listen_ctx->remote_addr[0],
+                          get_sockaddr_len(listen_ctx->remote_addr[0]), m, auth, listen_ctx->timeout, NULL);
+        }
+
+        if (mode == UDP_ONLY) {
+            LOGI("TCP relay disabled");
+        }
 
-    LOGI("listening at %s:%s", local_addr, local_port);
+        if (k >= 0) {
+            LOGI("listening at %s:%s (DSCP 0x%x)", local_addr, listen_port, dscp[k].dscp);
+        } else {
+            LOGI("listening at %s:%s (Default DSCP)", local_addr, listen_port);
+        }
+    }
 
     // setuid
     if (user != NULL) {
diff --git a/src/redir.h b/src/redir.h
index 30d7d60..1778ca0 100644
--- a/src/redir.h
+++ b/src/redir.h
@@ -34,6 +34,7 @@ typedef struct listen_ctx {
     int fd;
     int method;
     struct sockaddr **remote_addr;
+    int tos;
 } listen_ctx_t;
 
 typedef struct server_ctx {
