#!/bin/sh /etc/rc.common

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

CONFIG=/etc/shadowsocks.json


start() {

	uci show shadowsocks 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo "Shadowsocks is not configured, exiting..."
		exit 1
	fi

	SERVER=$(uci get shadowsocks.proxy.server)
	PORT=$(uci get shadowsocks.proxy.port)
	LPORT=$(uci get shadowsocks.proxy.lport)
	PASSWORD=$(uci get shadowsocks.proxy.password)
	TIMEOUT=$(uci get shadowsocks.proxy.timeout)
	METHOD=$(uci get shadowsocks.proxy.method)

cat <<BOF >$CONFIG
        
{
        "server": "$SERVER",
        "server_port": $PORT,
        "local_port": $LPORT,
        "password": "$PASSWORD",
        "timeout": $TIMEOUT,
        "method": "$METHOD" 
}       

BOF

        service_start /usr/bin/ss-redir -c $CONFIG -b 0.0.0.0

	iptables -t nat -N SOCKS 2>/dev/null
	iptables -t nat -F SOCKS
	iptables -t nat -A SOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A SOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A SOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A SOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A SOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A SOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A SOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A SOCKS -d 240.0.0.0/4 -j RETURN
	iptables -t nat -A SOCKS -p tcp -j REDIRECT --to-ports $LPORT

	for i in `cat /var/etc/dnsmasq.conf | grep dhcp-range | cut -c12- | cut -f1 -d','`
	do
		iptables -t nat -D PREROUTING  -i $i -p tcp -j SOCKS 2>/dev/null
		iptables -t nat -A PREROUTING  -i $i -p tcp -j SOCKS
	done

#	for g in `uci show network |grep '\.gateway=' |grep -v '@route'`
#	do
#		DEV=$(echo $g | cut -f2 -d".")
#		GW=$(echo $g | cut -f2 -d"'")
#		route add $SERVER gw $GW $DEV
#	done

}

stop() {
	SERVER=$(uci get shadowsocks.proxy.server)
        service_stop /usr/bin/ss-redir

	iptables -t nat -F SOCKS

	for i in `cat /var/etc/dnsmasq.conf | grep dhcp-range | cut -c12- | cut -f1 -d','`
	do
		iptables -t nat -D PREROUTING  -i $i -p tcp -j SOCKS
	done

	iptables -t nat -X SOCKS

#	for g in `uci show network |grep '\.gateway=' |grep -v '@route' | cut -f2 -d"'"`
#	do
#		route del $SERVER gw $g
#	done

}

